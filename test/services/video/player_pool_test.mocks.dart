// Mocks generated by Mockito 5.4.5 from annotations
// in ohftokv3/test/services/video/player_pool_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ohftokv3/services/video/media_kit_player_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MediaKitPlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaKitPlayerService extends _i1.Mock
    implements _i2.MediaKitPlayerService {
  @override
  _i3.Future<Duration> get position =>
      (super.noSuchMethod(
            Invocation.getter(#position),
            returnValue: _i3.Future<Duration>.value(
              _FakeDuration_0(this, Invocation.getter(#position)),
            ),
            returnValueForMissingStub: _i3.Future<Duration>.value(
              _FakeDuration_0(this, Invocation.getter(#position)),
            ),
          )
          as _i3.Future<Duration>);

  @override
  _i3.Future<Duration> get duration =>
      (super.noSuchMethod(
            Invocation.getter(#duration),
            returnValue: _i3.Future<Duration>.value(
              _FakeDuration_0(this, Invocation.getter(#duration)),
            ),
            returnValueForMissingStub: _i3.Future<Duration>.value(
              _FakeDuration_0(this, Invocation.getter(#duration)),
            ),
          )
          as _i3.Future<Duration>);

  @override
  _i3.Future<bool> get isPlaying =>
      (super.noSuchMethod(
            Invocation.getter(#isPlaying),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Stream<Duration> get positionStream =>
      (super.noSuchMethod(
            Invocation.getter(#positionStream),
            returnValue: _i3.Stream<Duration>.empty(),
            returnValueForMissingStub: _i3.Stream<Duration>.empty(),
          )
          as _i3.Stream<Duration>);

  @override
  _i3.Stream<bool> get playingStream =>
      (super.noSuchMethod(
            Invocation.getter(#playingStream),
            returnValue: _i3.Stream<bool>.empty(),
            returnValueForMissingStub: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);

  @override
  _i3.Future<void> initialize(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [videoUrl]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> play() =>
      (super.noSuchMethod(
            Invocation.method(#play, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> seek(Duration? position) =>
      (super.noSuchMethod(
            Invocation.method(#seek, [position]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

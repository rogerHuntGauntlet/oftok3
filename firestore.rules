rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isCommentOwner(commentData) {
      return isSignedIn() && commentData.userId == request.auth.uid;
    }

    function isProjectOwnerOrCollaborator(projectData) {
      return isSignedIn() && (
        request.auth.uid == projectData.userId || 
        projectData.collaboratorIds.hasAny([request.auth.uid])
      );
    }

    function isNotificationOwner(notificationData) {
      return isSignedIn() && notificationData.userId == request.auth.uid;
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      // Allow reading only user's own notifications
      allow read: if isNotificationOwner(resource.data);
      
      // Allow creating notifications if signed in and data is valid
      allow create: if isSignedIn() 
        && request.resource.data.userId is string
        && request.resource.data.title is string
        && request.resource.data.message is string
        && request.resource.data.createdAt is timestamp;
      
      // Allow updating only isRead field for user's own notifications
      allow update: if isNotificationOwner(resource.data)
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Allow deleting only user's own notifications
      allow delete: if isNotificationOwner(resource.data);
    }

    // Comments collection rules
    match /comments/{commentId} {
      // Allow reading comments by anyone
      allow read: if true;
      
      // Allow creating comments if signed in and data is valid
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 1000
        && request.resource.data.videoId is string
        && request.resource.data.createdAt is timestamp;
      
      // Allow updating for specific fields
      allow update: if isSignedIn() && (
        // Allow editing text only by comment owner
        (isCommentOwner(resource.data) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text', 'editedAt'])) ||
        // Allow updating reactions by any signed-in user
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']) ||
        // Allow updating likedBy by any signed-in user
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']) ||
        // Allow updating replyCount for parent comments
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replyCount'])
      );
      
      // Allow deleting only by comment owner
      allow delete: if isCommentOwner(resource.data);
    }

    // Projects collection rules
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && (
        // Allow project owner to do any updates
        request.auth.uid == resource.data.userId ||
        // Allow collaborators to update specific fields
        (resource.data.collaboratorIds.hasAny([request.auth.uid]) &&
         request.resource.data.diff(resource.data).affectedKeys().hasAny(['videoIds', 'collaboratorIds']))
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
} 